"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const nock = require("nock");
const utils = require("../../utils");
const api = require("../../api");
const helpers = require("../helpers");
const removeRemote_1 = require("../../database/removeRemote");
describe("RemoveRemote", () => {
    const instance = "fake-db";
    const remote = new removeRemote_1.RTDBRemoveRemote(instance);
    const serverUrl = utils.addSubdomain(api.realtimeOrigin, instance);
    let sandbox;
    beforeEach(() => {
        sandbox = sinon.createSandbox();
        helpers.mockAuth(sandbox);
    });
    afterEach(() => {
        sandbox.restore();
        nock.cleanAll();
    });
    it("listPath should work", () => {
        nock(serverUrl)
            .get("/.json")
            .query({ shallow: true, limitToFirst: "50000" })
            .reply(200, {
            a: true,
            x: true,
            f: true,
        });
        return chai_1.expect(remote.listPath("/")).to.eventually.eql(["a", "x", "f"]);
    });
    it("prefetchTest should return empty", () => {
        nock(serverUrl)
            .get("/empty/path.json")
            .query({ timeout: "100ms" })
            .reply(200, null);
        return chai_1.expect(remote.prefetchTest("/empty/path")).to.eventually.eql(removeRemote_1.NodeSize.EMPTY);
    });
    it("prefetchTest should return large", () => {
        nock(serverUrl)
            .get("/large/path.json")
            .query({ timeout: "100ms" })
            .reply(400, {
            error: "Data requested exceeds the maximum size that can be accessed with a single request.",
        });
        return chai_1.expect(remote.prefetchTest("/large/path")).to.eventually.eql(removeRemote_1.NodeSize.LARGE);
    });
    it("prefetchTest should return small", () => {
        nock(serverUrl)
            .get("/small/path.json")
            .query({ timeout: "100ms" })
            .reply(200, {
            x: "some data",
        });
        return chai_1.expect(remote.prefetchTest("/small/path")).to.eventually.eql(removeRemote_1.NodeSize.SMALL);
    });
    it("deletePath should work", () => {
        nock(serverUrl)
            .delete("/a/b.json")
            .query({ print: "silent" })
            .reply(200, {});
        return remote.deletePath("/a/b");
    });
});
//# sourceMappingURL=removeRemote.spec.js.map