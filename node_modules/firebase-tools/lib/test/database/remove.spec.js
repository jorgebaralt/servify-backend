"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const pathLib = require("path");
const remove_1 = require("../../database/remove");
const removeRemote_1 = require("../../database/removeRemote");
class TestRemoveRemote {
    constructor(data) {
        this.data = data;
    }
    deletePath(path) {
        if (path === "/") {
            this.data = null;
            return Promise.resolve(true);
        }
        const parentDir = pathLib.dirname(path);
        const basename = pathLib.basename(path);
        delete this._dataAtpath(parentDir)[basename];
        if (Object.keys(this._dataAtpath(parentDir)).length === 0) {
            return this.deletePath(parentDir);
        }
        return Promise.resolve(true);
    }
    prefetchTest(path) {
        const d = this._dataAtpath(path);
        if (!d) {
            return Promise.resolve(removeRemote_1.NodeSize.EMPTY);
        }
        if ("string" === typeof d) {
            return Promise.resolve(removeRemote_1.NodeSize.SMALL);
        }
        else if (Object.keys(d).length === 0) {
            return Promise.resolve(removeRemote_1.NodeSize.EMPTY);
        }
        else {
            return Promise.resolve(removeRemote_1.NodeSize.LARGE);
        }
    }
    listPath(path) {
        const d = this._dataAtpath(path);
        if (d) {
            return Promise.resolve(Object.keys(d));
        }
        return Promise.resolve([]);
    }
    _dataAtpath(path) {
        const splitedPath = path.slice(1).split("/");
        let d = this.data;
        for (const p of splitedPath) {
            if (d && p !== "") {
                if (typeof d === "string") {
                    d = null;
                }
                else {
                    d = d[p];
                }
            }
        }
        return d;
    }
}
describe("TestRemoveRemote", () => {
    const fakeDb = new TestRemoveRemote({
        a: {
            b: "1",
            c: "2",
        },
        d: {
            e: "3",
        },
        f: null,
    });
    it("listPath should work", () => {
        return chai_1.expect(fakeDb.listPath("/")).to.eventually.eql(["a", "d", "f"]);
    });
    it("prefetchTest should return empty", () => {
        return chai_1.expect(fakeDb.prefetchTest("/f")).to.eventually.eql(removeRemote_1.NodeSize.EMPTY);
    });
    it("prefetchTest should return large", () => {
        return chai_1.expect(fakeDb.prefetchTest("/")).to.eventually.eql(removeRemote_1.NodeSize.LARGE);
    });
    it("prefetchTest should return small", () => {
        return chai_1.expect(fakeDb.prefetchTest("/d/e")).to.eventually.eql(removeRemote_1.NodeSize.SMALL);
    });
    it("deletePath should work", () => {
        return fakeDb.deletePath("/a/b").then(() => {
            return chai_1.expect(fakeDb.listPath("/a")).to.eventually.eql(["c"]);
        });
    });
});
describe("DatabaseRemove", () => {
    it("DatabaseRemove should remove fakeDb at / 1", () => {
        const fakeDb = new TestRemoveRemote({
            c: "2",
        });
        const removeOps = new remove_1.default("/", {
            instance: "test-remover",
            concurrency: 200,
            retries: 5,
        });
        removeOps.remote = fakeDb;
        return removeOps.execute().then(() => {
            chai_1.expect(fakeDb.data).to.eql(null);
        });
    });
    it("DatabaseRemove should remove fakeDb at / 2", () => {
        const fakeDb = new TestRemoveRemote({
            a: {
                b: { x: { y: "1" } },
                c: "2",
            },
            d: {
                e: "3",
            },
        });
        const removeOps = new remove_1.default("/", {
            instance: "test-remover",
            concurrency: 200,
            retries: 5,
        });
        removeOps.remote = fakeDb;
        return removeOps.execute().then(() => {
            chai_1.expect(fakeDb.data).to.eql(null);
        });
    });
    it("DatabaseRemove should remove fakeDb at /a/b", () => {
        const fakeDb = new TestRemoveRemote({
            a: {
                b: { x: { y: "1" } },
                c: "2",
            },
            d: {
                e: "3",
            },
        });
        const removeOps = new remove_1.default("/a/b", {
            instance: "test-remover",
            concurrency: 200,
            retries: 5,
        });
        removeOps.remote = fakeDb;
        return removeOps.execute().then(() => {
            chai_1.expect(fakeDb.data).to.eql({
                a: {
                    c: "2",
                },
                d: {
                    e: "3",
                },
            });
        });
    });
    it("DatabaseRemove should remove fakeDb at /a", () => {
        const fakeDb = new TestRemoveRemote({
            a: {
                b: { x: { y: "1" } },
                c: "2",
            },
            d: {
                e: "3",
            },
        });
        const removeOps = new remove_1.default("/a", {
            instance: "test-remover",
            concurrency: 200,
            retries: 5,
        });
        removeOps.remote = fakeDb;
        return removeOps.execute().then(() => {
            chai_1.expect(fakeDb.data).to.eql({
                d: {
                    e: "3",
                },
            });
        });
    });
});
//# sourceMappingURL=remove.spec.js.map