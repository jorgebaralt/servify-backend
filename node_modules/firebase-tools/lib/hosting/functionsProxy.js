"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const request = require("request");
const getProjectId = require("../getProjectId");
const logger = require("../logger");
const REQUIRED_VARY_VALUES = ["Accept-Encoding", "Authorization", "Cookie"];
function makeVary(vary) {
    if (!vary) {
        return "Accept-Encoding, Authorization, Cookie";
    }
    const varies = vary.split(/, ?/).map((v) => {
        return v
            .split("-")
            .map((part) => lodash_1.capitalize(part))
            .join("-");
    });
    REQUIRED_VARY_VALUES.forEach((requiredVary) => {
        if (!lodash_1.includes(varies, requiredVary)) {
            varies.push(requiredVary);
        }
    });
    return varies.join(", ");
}
function default_1(options) {
    return (rewrite) => __awaiter(this, void 0, void 0, function* () {
        let url = `https://us-central1-${getProjectId(options, false)}.cloudfunctions.net/${rewrite.function}`;
        let destLabel = "live";
        if (lodash_1.includes(options.targets, "functions")) {
            destLabel = "local";
            url = `http://localhost:${options.port + 1}/${getProjectId(options, false)}/us-central1/${rewrite.function}`;
        }
        return yield ((req, res, next) => {
            logger.info(`[hosting] Rewriting ${req.url} to ${destLabel} function ${rewrite.function}`);
            const cookie = req.headers.cookie || "";
            const sessionCookie = cookie.split(/; ?/).find((c) => {
                return c.trim().indexOf("__session=") === 0;
            });
            const proxied = request({
                method: req.method,
                qs: req.query,
                url: url + req.url,
                headers: {
                    "X-Forwarded-Host": req.headers.host,
                    "X-Original-Url": req.url,
                    Pragma: "no-cache",
                    "Cache-Control": "no-cache, no-store",
                    Cookie: sessionCookie,
                },
                followRedirect: false,
                timeout: 60000,
            });
            req.pipe(proxied);
            proxied.on("error", (err) => {
                if (err.code === "ETIMEDOUT" || err.code === "ESOCKETTIMEDOUT") {
                    res.statusCode = 504;
                    return res.end("Timed out waiting for function to respond.");
                }
                res.statusCode = 500;
                res.end(`An internal error occurred while connecting to Cloud Function "${rewrite.function}"`);
            });
            proxied.on("response", (response) => {
                if (response.statusCode === 404) {
                    const cascade = response.headers["x-cascade"];
                    if (cascade && cascade.toUpperCase() === "PASS") {
                        return next();
                    }
                }
                if (!response.headers["cache-control"]) {
                    response.headers["cache-control"] = "private";
                }
                if (response.headers["cache-control"].indexOf("private") < 0) {
                    delete response.headers["set-cookie"];
                }
                response.headers.vary = makeVary(response.headers.vary);
                proxied.pipe(res);
            });
        });
    });
}
exports.default = default_1;
//# sourceMappingURL=functionsProxy.js.map