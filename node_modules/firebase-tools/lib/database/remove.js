"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pathLib = require("path");
const FirebaseError = require("../error");
const logger = require("../logger");
const removeRemote_1 = require("./removeRemote");
const stack_1 = require("../throttler/stack");
class DatabaseRemove {
    constructor(path, options) {
        this.path = path;
        this.concurrency = options.concurrency;
        this.retries = options.retries;
        this.remote = new removeRemote_1.RTDBRemoveRemote(options.instance);
        this.waitingPath = new Map();
        this.jobStack = new stack_1.Stack({
            name: "long delete stack",
            concurrency: this.concurrency,
            handler: this.chunkedDelete.bind(this),
            retries: this.retries,
        });
    }
    execute() {
        const prom = this.jobStack.wait();
        this.jobStack.add(this.path);
        return prom;
    }
    chunkedDelete(path) {
        return this.remote
            .prefetchTest(path)
            .then((test) => {
            switch (test) {
                case removeRemote_1.NodeSize.SMALL:
                    return this.remote.deletePath(path);
                case removeRemote_1.NodeSize.LARGE:
                    return this.remote.listPath(path).then((pathList) => {
                        if (pathList) {
                            for (const p of pathList) {
                                this.jobStack.add(pathLib.join(path, p));
                            }
                            this.waitingPath.set(path, pathList.length);
                        }
                        return false;
                    });
                case removeRemote_1.NodeSize.EMPTY:
                    return true;
                default:
                    throw new FirebaseError("Unexpected prefetch test result: " + test, { exit: 3 });
            }
        })
            .then((deleted) => {
            if (!deleted) {
                return;
            }
            if (path === this.path) {
                this.jobStack.close();
                logger.debug("[database][long delete stack][FINAL]", this.jobStack.stats());
            }
            else {
                const parentPath = pathLib.dirname(path);
                const prevParentPathReference = this.waitingPath.get(parentPath);
                if (!prevParentPathReference) {
                    throw new FirebaseError(`Unexpected error: parent path reference is zero for path=${path}`, { exit: 3 });
                }
                this.waitingPath.set(parentPath, prevParentPathReference - 1);
                if (this.waitingPath.get(parentPath) === 0) {
                    this.jobStack.add(parentPath);
                    this.waitingPath.delete(parentPath);
                }
            }
        });
    }
}
exports.default = DatabaseRemove;
//# sourceMappingURL=remove.js.map