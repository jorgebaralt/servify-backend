"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const responseToError = require("../responseToError");
const utils = require("../utils");
const FirebaseError = require("../error");
const logger = require("../logger");
const api = require("../api");
var NodeSize;
(function (NodeSize) {
    NodeSize["SMALL"] = "small";
    NodeSize["LARGE"] = "large";
    NodeSize["EMPTY"] = "empty";
})(NodeSize = exports.NodeSize || (exports.NodeSize = {}));
class RTDBRemoveRemote {
    constructor(instance) {
        this.instance = instance;
    }
    deletePath(path) {
        return new Promise((resolve, reject) => {
            const url = utils.addSubdomain(api.realtimeOrigin, this.instance) + path + ".json?print=silent";
            const reqOptions = {
                url,
                json: true,
            };
            return api.addRequestHeaders(reqOptions).then((reqOptionsWithToken) => {
                request.del(reqOptionsWithToken, (err, res, body) => {
                    if (err) {
                        return reject(new FirebaseError(`Unexpected error while removing data at ${path}`, {
                            exit: 2,
                            original: err,
                        }));
                    }
                    else if (res.statusCode >= 400) {
                        return reject(responseToError(res, body));
                    }
                    logger.debug(`[database] Sucessfully removed data at ${path}`);
                    return resolve(true);
                });
            });
        });
    }
    prefetchTest(path) {
        const url = utils.addSubdomain(api.realtimeOrigin, this.instance) + path + ".json?timeout=100ms";
        const reqOptions = {
            url,
        };
        return api.addRequestHeaders(reqOptions).then((reqOptionsWithToken) => {
            return new Promise((resolve, reject) => {
                logger.debug(`[database] Prefetching test at ${path}`);
                request.get(reqOptionsWithToken, (err, res, body) => {
                    if (err) {
                        return reject(new FirebaseError(`Unexpected error while prefetching data to delete ${path}`, {
                            exit: 2,
                        }));
                    }
                    switch (res.statusCode) {
                        case 200:
                            if (body) {
                                return resolve(NodeSize.SMALL);
                            }
                            else {
                                return resolve(NodeSize.EMPTY);
                            }
                        case 400:
                            return resolve(NodeSize.LARGE);
                        case 413:
                            return resolve(NodeSize.LARGE);
                        default:
                            return reject(responseToError(res, body));
                    }
                });
            });
        });
    }
    listPath(path) {
        const url = utils.addSubdomain(api.realtimeOrigin, this.instance) +
            path +
            ".json?shallow=true&limitToFirst=50000";
        const reqOptions = {
            url,
        };
        return api.addRequestHeaders(reqOptions).then((reqOptionsWithToken) => {
            return new Promise((resolve, reject) => {
                request.get(reqOptionsWithToken, (err, res, body) => {
                    if (err) {
                        return reject(new FirebaseError("Unexpected error while listing subtrees", {
                            exit: 2,
                            original: err,
                        }));
                    }
                    else if (res.statusCode >= 400) {
                        return reject(responseToError(res, body));
                    }
                    let data = {};
                    try {
                        data = JSON.parse(body);
                    }
                    catch (e) {
                        return reject(new FirebaseError("Malformed JSON response in shallow get ", {
                            exit: 2,
                            original: e,
                        }));
                    }
                    if (data) {
                        const keyList = Object.keys(data);
                        return resolve(keyList);
                    }
                    resolve([]);
                });
            });
        });
    }
}
exports.RTDBRemoveRemote = RTDBRemoveRemote;
//# sourceMappingURL=removeRemote.js.map