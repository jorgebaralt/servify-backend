"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("../logger");
function backoff(retryNumber, delay) {
    return new Promise((resolve) => {
        setTimeout(resolve, delay * Math.pow(2, retryNumber));
    });
}
function DEFAULT_HANDLER(task) {
    return task();
}
class Throttler {
    constructor(options) {
        this.name = "";
        this.concurrency = 200;
        this.handler = DEFAULT_HANDLER;
        this.active = 0;
        this.complete = 0;
        this.success = 0;
        this.errored = 0;
        this.retried = 0;
        this.total = 0;
        this.taskDataMap = new Map();
        this.waits = [];
        this.min = 9999999999;
        this.max = 0;
        this.avg = 0;
        this.retries = 0;
        this.backoff = 200;
        this.closed = false;
        this.finished = false;
        this.startTime = 0;
        if (options.name) {
            this.name = options.name;
        }
        if (options.handler) {
            this.handler = options.handler;
        }
        if (typeof options.concurrency === "number") {
            this.concurrency = options.concurrency;
        }
        if (typeof options.retries === "number") {
            this.retries = options.retries;
        }
        if (typeof options.backoff === "number") {
            this.backoff = options.backoff;
        }
        if (typeof options.backoff === "number") {
            this.backoff = options.backoff;
        }
    }
    wait() {
        const p = new Promise((resolve, reject) => {
            this.waits.push({ resolve, reject });
        });
        return p;
    }
    add(task) {
        this.addHelper(task);
    }
    run(task) {
        return new Promise((resolve, reject) => {
            this.addHelper(task, { resolve, reject });
        });
    }
    close() {
        this.closed = true;
        return this.finishIfIdle();
    }
    process() {
        if (this.finishIfIdle() || this.active >= this.concurrency || !this.hasWaitingTask()) {
            return;
        }
        this.active++;
        this.handle(this.nextWaitingTaskIndex());
    }
    handle(cursorIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const taskData = this.taskDataMap.get(cursorIndex);
            if (!taskData) {
                throw new Error(`taskData.get(${cursorIndex}) does not exist`);
            }
            const task = taskData.task;
            const tname = this.taskName(cursorIndex);
            const t0 = Date.now();
            try {
                const result = yield this.handler(task);
                const dt = Date.now() - t0;
                if (dt < this.min) {
                    this.min = dt;
                }
                if (dt > this.max) {
                    this.max = dt;
                }
                this.avg = (this.avg * this.complete + dt) / (this.complete + 1);
                this.success++;
                this.complete++;
                this.active--;
                if (taskData.wait) {
                    taskData.wait.resolve(result);
                }
                this.taskDataMap.delete(cursorIndex);
                this.process();
            }
            catch (err) {
                if (this.retries > 0) {
                    if (taskData.retryCount < this.retries) {
                        taskData.retryCount++;
                        this.retried++;
                        yield backoff(taskData.retryCount, this.backoff);
                        logger.debug(`[${this.name}] Retrying task`, tname);
                        return this.handle(cursorIndex);
                    }
                }
                this.errored++;
                this.complete++;
                this.active--;
                if (taskData.retryCount > 0) {
                    logger.debug(`[${this.name}] Retries exhausted for task ${tname}:`, err);
                }
                else {
                    logger.debug(`[${this.name}] Error on task ${tname}:`, err);
                }
                if (taskData.wait) {
                    taskData.wait.reject(err);
                }
                this.finish(err);
            }
        });
    }
    stats() {
        return {
            max: this.max,
            min: this.min,
            avg: this.avg,
            active: this.active,
            complete: this.complete,
            success: this.success,
            errored: this.errored,
            retried: this.retried,
            total: this.total,
            elapsed: Date.now() - this.startTime,
        };
    }
    taskName(cursorIndex) {
        const taskData = this.taskDataMap.get(cursorIndex);
        if (!taskData) {
            return "finished task";
        }
        return typeof taskData.task === "string" ? taskData.task : `index ${cursorIndex}`;
    }
    addHelper(task, wait) {
        if (this.closed) {
            throw new Error("Cannot add a task to a closed throttler.");
        }
        if (!this.startTime) {
            this.startTime = Date.now();
        }
        this.taskDataMap.set(this.total, {
            task,
            wait,
            retryCount: 0,
        });
        this.total++;
        this.process();
    }
    finishIfIdle() {
        if (this.closed && !this.hasWaitingTask() && this.active === 0) {
            this.finish(null);
            return true;
        }
        return false;
    }
    finish(err) {
        this.waits.forEach((p) => {
            if (err) {
                return p.reject(err);
            }
            this.finished = true;
            return p.resolve();
        });
    }
}
exports.Throttler = Throttler;
//# sourceMappingURL=throttler.js.map