/**
 * Copyright 2014-2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { ApiError, BodyResponseCallback, DecorateRequestOptions, DeleteCallback, ExistsCallback, GetConfig, Metadata, ServiceObject } from '@google-cloud/common';
import * as request from 'request';
import { Acl } from './acl';
import { Channel } from './channel';
import { File, FileOptions, CreateResumableUploadOptions, CreateWriteStreamOptions } from './file';
import { Iam } from './iam';
import { Notification } from './notification';
import { Storage } from './storage';
interface BucketOptions {
    userProject?: string;
}
/**
 * @callback GetFilesCallback
 * @param {?Error} err Request error, if any.
 * @param {File[]} files Array of {@link File} instances.
 */
export interface GetFilesCallback {
    (err: Error | null, files?: File[], nextQuery?: {}, apiResponse?: request.Response): void;
}
/**
 * See a [Objects:
 * watchAll request
 * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).
 */
interface WatchAllOptions {
    delimiter?: string;
    maxResults?: number;
    pageToken?: string;
    prefix?: string;
    projection?: string;
    userProject?: string;
    versions?: boolean;
}
/**
 * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().
 * @property {string} [append=true] The new rules will be appended to any
 *     pre-existing rules.
 */
export interface AddLifecycleRuleOptions {
    append?: boolean;
}
export declare type LifecycleRule = {
    action: {
        type: string;
        storageClass?: string;
    } | string;
    condition: {
        [key: string]: boolean | Date | number | string;
    };
    storageClass?: string;
};
/**
 * Query object for listing files.
 *
 * @typedef {object} GetFilesOptions
 * @property {boolean} [autoPaginate=true] Have pagination handled
 *     automatically.
 * @property {string} [delimiter] Results will contain only objects whose
 *     names, aside from the prefix, do not contain delimiter. Objects whose
 *     names, aside from the prefix, contain delimiter will have their name
 *     truncated after the delimiter, returned in `apiResponse.prefixes`.
 *     Duplicate prefixes are omitted.
 * @property {string} [directory] Filter results based on a directory name, or
 *     more technically, a "prefix".
 * @property {string} [prefix] Filter results to objects whose names begin
 *     with this prefix.
 * @property {number} [maxApiCalls] Maximum number of API calls to make.
 * @property {number} [maxResults] Maximum number of items plus prefixes to
 *     return.
 * @property {string} [pageToken] A previously-returned page token
 *     representing part of the larger set of results to view.
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 * @property {boolean} [versions] If true, returns File objects scoped to
 *     their versions.
 */
export interface GetFilesOptions {
    autoPaginate?: boolean;
    delimiter?: string;
    directory?: string;
    prefix?: string;
    maxApiCalls?: number;
    maxResults?: number;
    pageToken?: string;
    userProject?: string;
    versions?: boolean;
}
/**
 * @typedef {object} CombineOptions
 * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of
 *     the form
 *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,
 *     that will be used to encrypt the object. Overwrites the object
 * metadata's `kms_key_name` value, if any.
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface CombineOptions {
    kmsKeyName?: string;
    userProject?: string;
}
/**
 * @callback CombineCallback
 * @param {?Error} err Request error, if any.
 * @param {File} newFile The new {@link File}.
 * @param {object} apiResponse The full API response.
 */
export interface CombineCallback {
    (err: Error | null, newFile: File | null, apiResponse: request.Response): void;
}
/**
 * @typedef {array} CombineResponse
 * @property {File} 0 The new {@link File}.
 * @property {object} 1 The full API response.
 */
export declare type CombineResponse = [File, request.Response];
/**
 * See a [Objects:
 * watchAll request
 * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).
 *
 * @typedef {object} CreateChannelConfig
 * @property {string} address The address where notifications are
 *     delivered for this channel.
 */
export interface CreateChannelConfig extends WatchAllOptions {
    address: string;
}
/**
 * @typedef {object} CreateChannelOptions
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface CreateChannelOptions {
    userProject?: string;
}
/**
 * @typedef {array} CreateChannelResponse
 * @property {Channel} 0 The new {@link Channel}.
 * @property {object} 1 The full API response.
 */
export declare type CreateChannelResponse = [Channel, request.Response];
/**
 * @callback CreateChannelCallback
 * @param {?Error} err Request error, if any.
 * @param {Channel} channel The new {@link Channel}.
 * @param {object} apiResponse The full API response.
 */
export interface CreateChannelCallback {
    (err: Error | null, channel: Channel | null, apiResponse: request.Response): void;
}
/**
 * Metadata to set for the Notification.
 *
 * @typedef {object} CreateNotificationOptions
 * @property {object} [customAttributes] An optional list of additional
 *     attributes to attach to each Cloud PubSub message published for this
 *     notification subscription.
 * @property {string[]} [eventTypes] If present, only send notifications about
 *     listed event types. If empty, sent notifications for all event types.
 * @property {string} [objectNamePrefix] If present, only apply this
 *     notification configuration to object names that begin with this prefix.
 * @property {string} [payloadFormat] The desired content of the Payload.
 *     Defaults to `JSON_API_V1`.
 *
 *     Acceptable values are:
 *     - `JSON_API_V1`
 *
 *     - `NONE`
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface CreateNotificationOptions {
    customAttributes?: {
        [key: string]: string;
    };
    eventTypes?: string[];
    objectNamePrefix?: string;
    payloadFormat?: string;
    userProject?: string;
}
/**
 * @callback CreateNotificationCallback
 * @param {?Error} err Request error, if any.
 * @param {Notification} notification The new {@link Notification}.
 * @param {object} apiResponse The full API response.
 */
export interface CreateNotificationCallback {
    (err: Error | null, notification: Notification | null, apiResponse: request.Response): void;
}
/**
 * @typedef {array} CreateNotificationResponse
 * @property {Notification} 0 The new {@link Notification}.
 * @property {object} 1 The full API response.
 */
export declare type CreateNotificationResponse = [Notification, request.Response];
/**
 * @typedef {object} DeleteBucketOptions Configuration options.
 * @param {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface DeleteBucketOptions {
    userProject?: string;
}
/**
 * @typedef {array} DeleteBucketResponse
 * @property {object} 0 The full API response.
 */
export declare type DeleteBucketResponse = [request.Response];
/**
 * @callback DeleteBucketCallback
 * @param {?Error} err Request error, if any.
 * @param {object} apiResponse The full API response.
 */
export interface DeleteBucketCallback extends DeleteCallback {
    (err: Error | null, apiResponse: request.Response): void;
}
/**
 * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}
 *     for all of the supported properties.
 * @property {boolean} [force] Suppress errors until all files have been
 *     processed.
 */
export interface DeleteFilesOptions extends GetFilesOptions {
    force?: boolean;
}
/**
 * @callback DeleteFilesCallback
 * @param {?Error|?Error[]} err Request error, if any, or array of errors from
 *     files that were not able to be deleted.
 * @param {object} [apiResponse] The full API response.
 */
export interface DeleteFilesCallback {
    (err: Error | Error[] | null, apiResponse?: object): void;
}
/**
 * @typedef {array} DeleteLabelsResponse
 * @property {object} 0 The full API response.
 */
export declare type DeleteLabelsResponse = [request.Response];
/**
 * @callback DeleteLabelsCallback
 * @param {?Error} err Request error, if any.
 * @param {object} metadata Bucket's metadata.
 */
export interface DeleteLabelsCallback extends SetLabelsCallback {
}
/**
 * @typedef {array} DisableRequesterPaysResponse
 * @property {object} 0 The full API response.
 */
export declare type DisableRequesterPaysResponse = [request.Response];
/**
 * @callback DisableRequesterPaysCallback
 * @param {?Error} err Request error, if any.
 * @param {object} apiResponse The full API response.
 */
export interface DisableRequesterPaysCallback {
    (err?: Error | null, apiResponse?: object): void;
}
/**
 * @typedef {array} EnableRequesterPaysResponse
 * @property {object} 0 The full API response.
 */
export declare type EnableRequesterPaysResponse = [request.Response];
/**
 * @callback EnableRequesterPaysCallback
 * @param {?Error} err Request error, if any.
 * @param {object} apiResponse The full API response.
 */
export interface EnableRequesterPaysCallback {
    (err?: Error | null, apiResponse?: request.Response): void;
}
/**
 * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().
 * @param {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface BucketExistsOptions {
    userProject?: string;
}
/**
 * @typedef {array} BucketExistsResponse
 * @property {boolean} 0 Whether the {@link Bucket} exists.
 */
export declare type BucketExistsResponse = [boolean];
/**
 * @callback BucketExistsCallback
 * @param {?Error} err Request error, if any.
 * @param {boolean} exists Whether the {@link Bucket} exists.
 */
export interface BucketExistsCallback extends ExistsCallback {
}
/**
 * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()
 * @property {boolean} [autoCreate] Automatically create the object if
 *     it does not exist. Default: `false`
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface GetBucketOptions extends GetConfig {
    userProject?: string;
}
/**
 * @typedef {array} GetBucketResponse
 * @property {Bucket} 0 The {@link Bucket}.
 * @property {object} 1 The full API response.
 */
export declare type GetBucketResponse = [Bucket, request.Response];
/**
 * @callback GetBucketCallback
 * @param {?Error} err Request error, if any.
 * @param {Bucket} bucket The {@link Bucket}.
 * @param {object} apiResponse The full API response.
 */
export interface GetBucketCallback {
    (err: ApiError | null, bucket: Bucket | null, apiResponse: request.Response): void;
}
/**
 * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().
 * @param {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface GetLabelsOptions {
    userProject?: string;
}
/**
 * @typedef {array} GetLabelsResponse
 * @property {object} 0 Object of labels currently set on this bucket.
 */
export declare type GetLabelsResponse = [request.Response];
/**
 * @callback GetLabelsCallback
 * @param {?Error} err Request error, if any.
 * @param {object} labels Object of labels currently set on this bucket.
 */
export interface GetLabelsCallback {
    (err: Error | null, labels: object | null): void;
}
/**
 * @typedef {array} GetBucketMetadataResponse
 * @property {object} 0 The bucket metadata.
 * @property {object} 1 The full API response.
 */
export declare type GetBucketMetadataResponse = [Metadata, request.Response];
/**
 * @callback GetBucketMetadataCallback
 * @param {?Error} err Request error, if any.
 * @param {object} metadata The bucket metadata.
 * @param {object} apiResponse The full API response.
 */
export interface GetBucketMetadataCallback {
    (err: ApiError | null, metadata: Metadata | null, apiResponse: request.Response): void;
}
/**
 * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface GetBucketMetadataOptions {
    userProject?: string;
}
/**
 * @typedef {object} GetNotificationOptions Configuration options for Bucket#getNotification().
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface GetNotificationsOptions {
    userProject?: string;
}
/**
 * @callback GetNotificationsCallback
 * @param {?Error} err Request error, if any.
 * @param {Notification[]} notifications Array of {@link Notification}
 *     instances.
 * @param {object} apiResponse The full API response.
 */
export interface GetNotificationsCallback {
    (err: Error | null, notifications: Notification[] | null, apiResponse: request.Response): void;
}
/**
 * @typedef {array} GetNotificationsResponse
 * @property {Notification[]} 0 Array of {@link Notification} instances.
 * @property {object} 1 The full API response.
 */
export declare type GetNotificationsResponse = [Notification[], request.Response];
/**
 * @typedef {object} MakeBucketPrivateOptions
 * @param {boolean} [includeFiles=false] Make each file in the bucket
 *     private.
 * @param {boolean} [force] Queue errors occurred while making files
 *     private until all files have been processed.
 * @param {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface MakeBucketPrivateOptions {
    includeFiles?: boolean;
    force?: boolean;
    userProject?: string;
}
/**
 * @typedef {array} MakeBucketPrivateResponse
 * @property {File[]} 0 List of files made private.
 */
export declare type MakeBucketPrivateResponse = [File[]];
/**
 * @callback MakeBucketPrivateCallback
 * @param {?Error} err Request error, if any.
 * @param {File[]} files List of files made private.
 */
export interface MakeBucketPrivateCallback {
    (err?: Error | null, files?: File[]): void;
}
/**
 * @typedef {object} MakeBucketPublicOptions
 * @param {boolean} [includeFiles=false] Make each file in the bucket
 *     private.
 * @param {boolean} [force] Queue errors occurred while making files
 *     private until all files have been processed.
 */
export interface MakeBucketPublicOptions {
    includeFiles?: boolean;
    force?: boolean;
}
/**
 * @callback MakeBucketPublicCallback
 * @param {?Error} err Request error, if any.
 * @param {File[]} files List of files made public.
 */
export interface MakeBucketPublicCallback {
    (err?: Error | null, files?: File[]): void;
}
/**
 * @typedef {array} MakeBucketPublicResponse
 * @property {File[]} 0 List of files made public.
 */
export declare type MakeBucketPublicResponse = [File[]];
/**
 * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface SetBucketMetadataOptions {
    userProject?: string;
}
/**
 * @typedef {array} SetBucketMetadataResponse
 * @property {object} apiResponse The full API response.
 */
export declare type SetBucketMetadataResponse = [request.Response];
/**
 * @callback SetBucketMetadataCallback
 * @param {?Error} err Request error, if any.
 * @param {object} metadata The bucket metadata.
 */
export interface SetBucketMetadataCallback {
    (err?: Error | null, metadata?: Metadata): void;
}
/**
 * @callback BucketLockCallback
 * @param {?Error} err Request error, if any.
 * @param {object} apiResponse The full API response.
 */
export interface BucketLockCallback {
    (err?: Error | null, apiResponse?: request.Response): void;
}
/**
 * @typedef {array} SetBucketMetadataResponse
 * @property {object} apiResponse The full API response.
 */
export declare type BucketLockResponse = [request.Response];
export declare type Labels = {
    [key: string]: string;
};
/**
 * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface SetLabelsOptions {
    userProject?: string;
}
/**
 * @typedef {array} SetLabelsResponse
 * @property {object} 0 The bucket metadata.
 */
export declare type SetLabelsResponse = [request.Response];
/**
 * @callback SetLabelsCallback
 * @param {?Error} err Request error, if any.
 * @param {object} metadata The bucket metadata.
 */
export interface SetLabelsCallback {
    (err?: Error | null, metadata?: Metadata): void;
}
/**
 * @typedef {object} SetBucketStorageClassOptions
 * @param {string} [userProject] - The ID of the project which will be
 *     billed for the request.
 */
export interface SetBucketStorageClassOptions {
    userProject?: string;
}
/**
 * @callback SetBucketStorageClassCallback
 * @param {?Error} err Request error, if any.
 */
export interface SetBucketStorageClassCallback {
    (err?: Error | null): void;
}
/**
 * @typedef {array} UploadResponse
 * @property {object} 0 The uploaded {@link File}.
 * @property {object} 1 The full API response.
 */
export declare type UploadResponse = [File, request.Response];
/**
 * @callback UploadCallback
 * @param {?Error} err Request error, if any.
 * @param {object} file The uploaded {@link File}.
 * @param {object} apiResponse The full API response.
 */
export interface UploadCallback {
    (err: Error | null, file?: File | null, apiResponse?: request.Response): void;
}
/**
 * @typedef {object} UploadOptions Configuration options for Bucket#upload().
 * @param {string|File} [options.destination] The place to save
 *     your file. If given a string, the file will be uploaded to the bucket
 *     using the string as a filename. When given a File object, your local
 * file will be uploaded to the File object's bucket and under the File
 * object's name. Lastly, when this argument is omitted, the file is uploaded
 * to your bucket using the name of the local file.
 * @param {string} [options.encryptionKey] A custom encryption key. See
 *     [Customer-supplied Encryption
 * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).
 * @param {boolean} [options.gzip] Automatically gzip the file. This will set
 *     `options.metadata.contentEncoding` to `gzip`.
 * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will
 *     be used to encrypt the object. Must be in the format:
 *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.
 * @param {object} [options.metadata] See an
 *     [Objects: insert request
 * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).
 * @param {string} [options.offset] The starting byte of the upload stream, for
 *     resuming an interrupted upload. Defaults to 0.
 * @param {string} [options.predefinedAcl] Apply a predefined set of access
 *     controls to this object.
 *
 *     Acceptable values are:
 *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and
 *       `allAuthenticatedUsers` get `READER` access.
 *
 *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and
 *       project team owners get `OWNER` access.
 *
 *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project
 *       team owners get `READER` access.
 *
 *     - **`private`** - Object owner gets `OWNER` access.
 *
 *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project
 *       team members get access according to their roles.
 *
 *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`
 * get `READER` access.
 * @param {boolean} [options.private] Make the uploaded file private. (Alias for
 *     `options.predefinedAcl = 'private'`)
 * @param {boolean} [options.public] Make the uploaded file public. (Alias for
 *     `options.predefinedAcl = 'publicRead'`)
 * @param {boolean} [options.resumable] Force a resumable upload. (default:
 *     true for files larger than 5 MB).
 * @param {string} [options.uri] The URI for an already-created resumable
 *     upload. See {@link File#createResumableUpload}.
 * @param {string} [options.userProject] The ID of the project which will be
 *     billed for the request.
 * @param {string|boolean} [options.validation] Possible values: `"md5"`,
 *     `"crc32c"`, or `false`. By default, data integrity is validated with an
 *     MD5 checksum for maximum reliability. CRC32c will provide better
 *     performance with less reliability. You may also choose to skip
 * validation completely, however this is **not recommended**.
 */
export interface UploadOptions extends CreateResumableUploadOptions, CreateWriteStreamOptions {
    destination?: string | File;
    encryptionKey?: string | Buffer;
    kmsKeyName?: string;
    resumable?: boolean;
}
/**
 * @private
 *
 * @typedef {object} MakeAllFilesPublicPrivateOptions
 * @property {boolean} [force] Suppress errors until all files have been
 *     processed.
 * @property {boolean} [private] Make files private.
 * @property {boolean} [public] Make files public.
 * @property {string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface MakeAllFilesPublicPrivateOptions {
    force?: boolean;
    private?: boolean;
    public?: boolean;
    userProject?: string;
}
/**
 * @private
 *
 * @callback SetBucketMetadataCallback
 * @param {?Error} err Request error, if any.
 * @param {File[]} files Files that were updated.
 */
interface MakeAllFilesPublicPrivateCallback {
    (err?: Error | Error[] | null, files?: File[]): void;
}
/**
 * @typedef {array} MakeAllFilesPublicPrivateResponse
 * @property {File[]} 0 List of files affected.
 */
declare type MakeAllFilesPublicPrivateResponse = [File[]];
/**
 * Create a Bucket object to interact with a Cloud Storage bucket.
 *
 * @class
 * @hideconstructor
 *
 * @param {Storage} storage A {@link Storage} instance.
 * @param {string} name The name of the bucket.
 * @param {object} [options] Configuration object.
 * @param {string} [options.userProject] User project.
 *
 * @example
 * const {Storage} = require('@google-cloud/storage');
 * const storage = new Storage();
 * const bucket = storage.bucket('albums');
 */
declare class Bucket extends ServiceObject {
    /**
     * The bucket's name.
     * @name Bucket#name
     * @type {string}
     */
    name: string;
    /**
     * A reference to the {@link Storage} associated with this {@link Bucket}
     * instance.
     * @name Bucket#storage
     * @type {Storage}
     */
    storage: Storage;
    /**
     * A user project to apply to each request from this bucket.
     * @name Bucket#userProject
     * @type {string}
     */
    userProject?: string;
    /**
     * Cloud Storage uses access control lists (ACLs) to manage object and
     * bucket access. ACLs are the mechanism you use to share objects with other
     * users and allow other users to access your buckets and objects.
     *
     * An ACL consists of one or more entries, where each entry grants permissions
     * to an entity. Permissions define the actions that can be performed against
     * an object or bucket (for example, `READ` or `WRITE`); the entity defines
     * who the permission applies to (for example, a specific user or group of
     * users).
     *
     * The `acl` object on a Bucket instance provides methods to get you a list of
     * the ACLs defined on your bucket, as well as set, update, and delete them.
     *
     * Buckets also have
     * [default
     * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)
     * for all created files. Default ACLs specify permissions that all new
     * objects added to the bucket will inherit by default. You can add, delete,
     * get, and update entities and permissions for these as well with
     * {@link Bucket#acl.default}.
     *
     * @see [About Access Control Lists]{@link http://goo.gl/6qBBPO}
     * @see [Default ACLs]{@link https://cloud.google.com/storage/docs/access-control/lists#default}
     *
     * @name Bucket#acl
     * @mixes Acl
     * @property {Acl} default Cloud Storage Buckets have
     * [default
     * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)
     * for all created files. You can add, delete, get, and update entities and
     * permissions for these as well. The method signatures and examples are all
     * the same, after only prefixing the method call with `default`.
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     *
     * //-
     * // Make a bucket's contents publicly readable.
     * //-
     * const myBucket = storage.bucket('my-bucket');
     *
     * const options = {
     *   entity: 'allUsers',
     *   role: storage.acl.READER_ROLE
     * };
     *
     * myBucket.acl.add(options, function(err, aclObject) {});
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * myBucket.acl.add(options).then(function(data) {
     *   const aclObject = data[0];
     *   const apiResponse = data[1];
     * });
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_print_bucket_acl
     * Example of printing a bucket's ACL:
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_print_bucket_acl_for_user
     * Example of printing a bucket's ACL for a specific user:
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_add_bucket_owner
     * Example of adding an owner to a bucket:
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_remove_bucket_owner
     * Example of removing an owner from a bucket:
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_add_bucket_default_owner
     * Example of adding a default owner to a bucket:
     *
     * @example <caption>include:samples/acl.js</caption>
     * region_tag:storage_remove_bucket_default_owner
     * Example of removing a default owner from a bucket:
     */
    acl: Acl;
    /**
     * Get and set IAM policies for your bucket.
     *
     * @name Bucket#iam
     * @mixes Iam
     *
     * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)
     * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)
     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('albums');
     *
     * //-
     * // Get the IAM policy for your bucket.
     * //-
     * bucket.iam.getPolicy(function(err, policy) {
     *   console.log(policy);
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * bucket.iam.getPolicy().then(function(data) {
     *   const policy = data[0];
     *   const apiResponse = data[1];
     * });
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_view_bucket_iam_members
     * Example of retrieving a bucket's IAM policy:
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_add_bucket_iam_member
     * Example of adding to a bucket's IAM policy:
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_remove_bucket_iam_member
     * Example of removing from a bucket's IAM policy:
     */
    iam: Iam;
    /**
     * Get {@link File} objects for the files currently in the bucket as a
     * readable object stream.
     *
     * @method Bucket#getFilesStream
     * @param {GetFilesOptions} [query] Query object for listing files.
     * @returns {ReadableStream} A readable stream that emits {@link File} instances.
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('albums');
     *
     * bucket.getFilesStream()
     *   .on('error', console.error)
     *   .on('data', function(file) {
     *     // file is a File object.
     *   })
     *   .on('end', function() {
     *     // All files retrieved.
     *   });
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * bucket.getFilesStream()
     *   .on('data', function(file) {
     *     this.end();
     *   });
     */
    getFilesStream: Function;
    constructor(storage: Storage, name: string, options?: BucketOptions);
    addLifecycleRule(rule: LifecycleRule, options?: AddLifecycleRuleOptions): Promise<SetBucketMetadataResponse>;
    addLifecycleRule(rule: LifecycleRule, options: AddLifecycleRuleOptions, callback: SetBucketMetadataCallback): void;
    addLifecycleRule(rule: LifecycleRule, callback: SetBucketMetadataCallback): void;
    combine(sources: string[] | File[], destination: string | File, options: CombineOptions): Promise<CombineResponse>;
    combine(sources: string[] | File[], destination: string | File, options: CombineOptions, callback: CombineCallback): void;
    combine(sources: string[] | File[], destination: string | File, callback: CombineCallback): void;
    createChannel(id: string, config: CreateChannelConfig, options?: CreateChannelOptions): Promise<CreateChannelResponse>;
    createChannel(id: string, config: CreateChannelConfig, callback: CreateChannelCallback): void;
    createChannel(id: string, config: CreateChannelConfig, options: CreateChannelOptions, callback: CreateChannelCallback): void;
    createNotification(topic: string, options?: CreateNotificationOptions): Promise<CreateNotificationResponse>;
    createNotification(topic: string, options: CreateNotificationOptions, callback: CreateNotificationCallback): void;
    createNotification(topic: string, callback: CreateNotificationCallback): void;
    delete(options?: DeleteBucketOptions): Promise<DeleteBucketResponse>;
    delete(callback: DeleteBucketCallback): void;
    delete(options: DeleteBucketOptions, callback: DeleteBucketCallback): void;
    deleteFiles(query?: DeleteFilesOptions): Promise<void>;
    deleteFiles(callback: DeleteFilesCallback): void;
    deleteFiles(query: DeleteFilesOptions, callback: DeleteFilesCallback): void;
    deleteLabels(labels?: string | string[]): Promise<DeleteLabelsResponse>;
    deleteLabels(callback: DeleteLabelsCallback): void;
    deleteLabels(labels: string | string[], callback: DeleteLabelsCallback): void;
    disableRequesterPays(): Promise<DisableRequesterPaysResponse>;
    disableRequesterPays(callback: DisableRequesterPaysCallback): void;
    enableRequesterPays(): Promise<EnableRequesterPaysResponse>;
    enableRequesterPays(callback: EnableRequesterPaysCallback): void;
    exists(options?: BucketExistsOptions): Promise<BucketExistsResponse>;
    exists(callback: BucketExistsCallback): void;
    exists(options: BucketExistsOptions, callback: BucketExistsCallback): void;
    /**
     * Create a {@link File} object. See {@link File} to see how to handle
     * the different use cases you may have.
     *
     * @param {string} name The name of the file in this bucket.
     * @param {object} [options] Configuration options.
     * @param {string|number} [options.generation] Only use a specific revision of
     *     this file.
     * @param {string} [options.encryptionKey] A custom encryption key. See
     *     [Customer-supplied Encryption
     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).
     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will
     *     be used to encrypt the object. Must be in the format:
     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.
     *     KMS key ring must use the same location as the bucket.
     * @returns {File}
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('albums');
     * const file = bucket.file('my-existing-file.png');
     */
    file(name: string, options?: FileOptions): File;
    get(options?: GetBucketOptions): Promise<GetBucketResponse>;
    get(callback: GetBucketCallback): void;
    get(options: GetBucketOptions, callback: GetBucketCallback): void;
    getFiles(query?: GetFilesOptions): Promise<[File[]]>;
    getFiles(query: GetFilesOptions, callback: GetFilesCallback): void;
    getFiles(callback: GetFilesCallback): void;
    getLabels(options: GetLabelsOptions): Promise<GetLabelsResponse>;
    getLabels(callback: GetLabelsCallback): void;
    getLabels(options: GetLabelsOptions, callback: GetLabelsCallback): void;
    getMetadata(options?: GetBucketMetadataOptions): Promise<GetBucketMetadataResponse>;
    getMetadata(callback: GetBucketMetadataCallback): void;
    getMetadata(options: GetBucketMetadataOptions, callback: GetBucketMetadataCallback): void;
    getNotifications(options?: GetNotificationsOptions): Promise<GetNotificationsResponse>;
    getNotifications(callback: GetNotificationsCallback): void;
    getNotifications(options: GetNotificationsOptions, callback: GetNotificationsCallback): void;
    lock(metageneration: number | string): Promise<BucketLockResponse>;
    lock(metageneration: number | string, callback: BucketLockCallback): void;
    makePrivate(options?: MakeBucketPrivateOptions): Promise<MakeBucketPrivateResponse>;
    makePrivate(callback: MakeBucketPrivateCallback): void;
    makePrivate(options: MakeBucketPrivateOptions, callback: MakeBucketPrivateCallback): void;
    makePublic(options?: MakeBucketPublicOptions): Promise<MakeBucketPublicResponse>;
    makePublic(callback: MakeBucketPublicCallback): void;
    makePublic(options: MakeBucketPublicOptions, callback: MakeBucketPublicCallback): void;
    /**
     * Get a reference to a Cloud Pub/Sub Notification.
     *
     * @param {string} id ID of notification.
     * @returns {Notification}
     * @see Notification
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('my-bucket');
     * const notification = bucket.notification('1');
     */
    notification(id: string): Notification;
    removeRetentionPeriod(): Promise<SetBucketMetadataResponse>;
    removeRetentionPeriod(callback: SetBucketMetadataCallback): void;
    request(reqOpts: DecorateRequestOptions): Promise<request.Response>;
    request(reqOpts: DecorateRequestOptions, callback: BodyResponseCallback): void;
    setLabels(labels: Labels, options: SetLabelsOptions): Promise<SetLabelsResponse>;
    setLabels(labels: Labels, callback: SetLabelsCallback): void;
    setLabels(labels: Labels, options: SetLabelsOptions, callback: SetLabelsCallback): void;
    setMetadata(metadata: Metadata, options?: SetBucketMetadataOptions): Promise<SetBucketMetadataResponse>;
    setMetadata(metadata: Metadata, options: SetBucketMetadataOptions, callback: SetBucketMetadataCallback): void;
    setMetadata(metadata: Metadata, callback: SetBucketMetadataCallback): void;
    setRetentionPeriod(duration: number): Promise<SetBucketMetadataResponse>;
    setRetentionPeriod(duration: number, callback: SetBucketMetadataCallback): void;
    setStorageClass(storageClass: string, options: SetBucketStorageClassOptions): Promise<SetBucketMetadataResponse>;
    setStorageClass(storageClass: string, callback: SetBucketStorageClassCallback): void;
    setStorageClass(storageClass: string, options: SetBucketStorageClassOptions, callback: SetBucketStorageClassCallback): void;
    /**
     * Set a user project to be billed for all requests made from this Bucket
     * object and any files referenced from this Bucket object.
     *
     * @param {string} userProject The user project.
     *
     * @example
     * const {Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('albums');
     *
     * bucket.setUserProject('grape-spaceship-123');
     */
    setUserProject(userProject: string): void;
    upload(pathString: string, options?: UploadOptions): Promise<UploadResponse>;
    upload(pathString: string, options: UploadOptions, callback: UploadCallback): void;
    upload(pathString: string, callback: UploadCallback): void;
    makeAllFilesPublicPrivate_(options?: MakeAllFilesPublicPrivateOptions): Promise<MakeAllFilesPublicPrivateResponse>;
    makeAllFilesPublicPrivate_(callback: MakeAllFilesPublicPrivateCallback): void;
    makeAllFilesPublicPrivate_(options: MakeAllFilesPublicPrivateOptions, callback: MakeAllFilesPublicPrivateCallback): void;
    getId(): string;
}
/**
 * Reference to the {@link Bucket} class.
 * @name module:@google-cloud/storage.Bucket
 * @see Bucket
 */
export { Bucket };
